
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Course{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  userId String
  description String?
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)
  categoryId String?
  category Category? @relation(fields:[categoryId],references: [id],onDelete:Cascade)
  attachements Attachement[]
  chapters Chapter[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updated DateTime @updatedAt
  @@index([categoryId])

}

model Attachement{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  courseId String
  course Course @relation(fields:[courseId],references: [id],onDelete:Cascade)
  
  createdAt DateTime @default(now())
  updated DateTime @updatedAt
  @@index([courseId])
  
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  course Course[]
}

model Chapter{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData MuxData?
  courseId String
  course Course @relation(fields:[courseId],references:[id],onDelete:Cascade)
  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])

}
model MuxData{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String @unique
  assetId String
  playbackId String?
  chapter Chapter @relation(fields:[chapterId],references:[id],onDelete:Cascade)


}

model UserProgress{
 id String @id @default(auto()) @map("_id") @db.ObjectId
 userId String 
 chapterId String
 chapter Chapter @relation(fields:[chapterId],references:[id],onDelete:Cascade)
 isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
  @@unique([userId,chapterId])

}



model Purchase{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  courseId String
  course Course @relation(fields:[courseId],references:[id],onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  stripeCustomerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}